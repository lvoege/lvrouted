#
# sample Makefile for Objective Caml
# Copyright (C) 2001 Jean-Christophe FILLIATRE
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

# where to install the binaries
prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR=@bindir@

REQUIRES= unix str

OCAMLFIND = @OCAMLFIND@
OCAMLC   = $(OCAMLFIND) @OCAMLC@ -w p -g -linkpkg -package "$(REQUIRES)"
OCAMLOPT = $(OCAMLFIND) @OCAMLOPT@ -w p -linkpkg -package "$(REQUIRES)"
OCAMLDEP = @OCAMLDEP@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLLIB = @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLVERSION = @OCAMLVERSION@
OCAMLWEB = @OCAMLWEB@
OCAMLWIN32 = @OCAMLWIN32@
EXE = @EXE@

INCLUDES = 
LIBS=-cclib -lcrypto
CFLAGS= -Wall -I`$(OCAMLFIND) printconf stdlib` -g
BFLAGS = -g $(INCLUDES) $(LIBS)
OFLAGS = $(INCLUDES) $(LIBS)

# main target
#############

NAME=lvrouted

all: $(OCAMLBEST) $(NAME).opt

# bytecode and native-code compilation
######################################

SOURCES = Version.ml LowLevel.ml Common.ml Log.ml Route.ml MAC.ml Tree.ml \
	Iface.ml Neighbor.ml $(NAME).ml
CMO = $(SOURCES:.ml=.cmo)
CMX = $(SOURCES:.ml=.cmx)

GENERATED = Version.ml

byte: $(NAME).byte
opt: $(NAME).opt

$(NAME).byte: $(CMO) lowlevel_c.o
	$(OCAMLC) $(BFLAGS) -o $@ $(CMO) lowlevel_c.o

$(NAME).opt: $(CMX) lowlevel_c.o
	$(OCAMLOPT) $(OFLAGS) -o $@ $(CMX) lowlevel_c.o

Version.ml: .svn/entries
	@echo Extracting svn version info
	@echo \(\* DO NOT EDIT BY HAND \*\) > Version.ml
	@echo let version=`svn info . | grep Revision | sed "s/.* //g"` >> Version.ml
	@echo let branch=\"`pwd | sed "s/.*lvrouted\///g" | sed "s/\/src//g"`\" >> Version.ml
	@echo let date=\"`date`\" >> Version.ml
	@echo let host=\"`uname -a`\" >> Version.ml
	@echo let ocamlopt=\"`ocamlopt -v | head -1`\" >> Version.ml
	@echo let who=\"`whoami`\" >> Version.ml

# installation
##############

install-indep: 
	mkdir -p $(BINDIR)

install: install-indep
	cp -f $(NAME).$(OCAMLBEST) $(BINDIR)/$(NAME)$(EXE)

install-byte: install-indep
	cp -f $(NAME).byte $(BINDIR)/$(NAME)$(EXE)

install-opt: install-indep
	cp -f $(NAME).opt $(BINDIR)/$(NAME)$(EXE)

# literate programming
######################

$(NAME).tex: $(SOURCES)
	$(OCAMLWEB) -o $@ $^

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .tex .dvi .ps .html

.c.i:
	$(CC) -c $(CFLAGS) $<

.mli.cmi:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.s:
	$(OCAMLOPT) -S -c $(OFLAGS) $<

.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<

.tex.dvi:
	latex $< && latex $<

.dvi.ps:
	dvips $< -o $@ 

.tex.html:
	hevea $<

# clean
#######

clean::
	rm -f *.cm[iox] *.o *~
	rm -f $(GENERATED) parser.output
	rm -f $(NAME).byte $(NAME).opt
	rm -f *.aux *.log $(NAME).tex $(NAME).dvi $(NAME).ps

dist-clean distclean:: clean
	rm -f Makefile config.cache config.log config.status

# depend
########

.depend depend:: $(GENERATED)
	rm -f .depend
	$(OCAMLDEP) $(INCLUDES) *.ml *.mli > .depend

include .depend
